# coding: utf-8
from 
from account import account
from account import Account
from decimal import Decimal
account1 = Account('John Green', Decimal('50.00'))
account1.name
account1.deposit(Decimal('25.53'))
account1.balance
Account?
from decimal import Decimal
class Account
def deposit(self,amount):
    if amount < Decimal('0.00'):
        raise ValueError('amount must be positive.')
    self.balance += amount
    
def withdraw(self,amount):
    if amount < self.balance:
        raise ValueError('amount must be <= to balance.')
    elif amount < Decimal('0.00'):
        raise ValueError('amount must be positive.')
    self.balance += amount
    
from account import Account
from decimal import Decimal
account1 = Account('John Green', Decimal('50.00'))
account1.withdraw(Decimal('20.0'))
def withdraw(self,amount):
    if amount < self.balance:
        raise ValueError('amount must be <= to balance.')
    elif amount < Decimal('0.00'):
        raise ValueError('amount must be positive.')
    self.balance -= amount
    
account1.withdraw(Decimal('20.0'))
def withdraw(self,amount):
    if amount > self.balance:
        raise ValueError('amount must be <= to balance.')
    elif amount < Decimal('0.00'):
        raise ValueError('amount must be positive.')
        
self.balance -= amount
def withdraw(self,amount):
    if amount > self.balance:
        raise ValueError('amount must be <= to balance.')
    elif amount < Decimal('0.00'):
        raise ValueError('amount must be positive.')
    self.balance -= amount
    
account1.withdraw(Decimal('20.0'))
def _init_(self, name, balance):
    if balance < Decimal('0.00'):
        raise ValueError('Initial balance must be >= to 0.00')
    self.name = name
    self.balance = balance
    
def deposit(self,amount):
    if amount < Decimal('0.00'):
        raise ValueError('amount must be positive.')
    self.balance += amount
    
def withdraw(self, amount):
    if amount > self.balance:
        raise ValueError('amount must be <= to balance.')
    elif amount < Decimal('0.00'):
        raise ValueError('amount must be positive.')
    self.balance -= amount
    
from account import Account
from decimal import Decimal
account1 = Account('John Green', Decimal('50.00'))
account1.withdraw(Decimal('20.0'))
from account import Account
from decimal import Decimal
account1 = Account('John Green', Decimal('50.00'))
account.balance
account.balance
account1.balance
account1.balance = Decimal('-1000.00')
account1.balance 
from timewithproperties import Time
wake_up = Time(hour = 6, minute = 30)
wake_up 
print(wake_up)
wake_up.hour
wake_up.set_time(hour=7, minute=45)
wake_up 
wake_up.hour = 6
wake_up 
wake_up.hour = 100
from timewithproperties import Time
t = Time()
t
t.time
t.time = (12, 30, 45)
t 
t.time
from timewithproperties import Time
wake_up = Time(hour = 7, minute = 45, second = 30)
wake_up._hour
wake_up._hour = 100
wake_up 
%save
%save?
