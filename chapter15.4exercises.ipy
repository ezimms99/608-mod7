# coding: utf-8
from sklearn.model_selection import KFold
kfold = KFold(n_splits=10, random_state=11, shuffle=True)
from sklearn.model_selection import cross_val_score
scores = cross_val_score(estimator=knn, X_digits.data, y=digits.target, cv=kfold)
scores 
scores = cross_val_score(estimator=knn, X=digits.data, y=digits.target, cv=kfold)
from sklearn.svm import SVC
from slklearn.naive_bayes import GuassianNB
from sklearn.naive_bayes import GuassianNB
from sklearn.naive_bayes import GaussianNB
estimators = {
    'KNeighborsClassifier': knn,
    'SVC': SVC(gamma='scale'),
    'GaussianNB': GaussianNB()}
import pandas as pd
nyc = pd.read_csv('ave_hi_nyc_jan_1895-2018.csv')
nyc.columns = ['Date', 'Temperature', 'Anomaly']
nyc.Date = nyc.Date.floordiv(100)
nyc.head(3)
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(nyc.Date.values.reshape(-1,1), nyc.Temperature.values, random_state=11)
X_train.shape
X_test.shape
from sklearn.linear_model import LinearRegression
linear_regression = LinearRegression()
linear_regression.fit(X=X_train, y=y_train)
linear_regression.coef_
linear_regression.intercept_
predicted = linear_regression.predict(X_test)
expected = y-test
expected = y_test
for p, e in zip(predicted[::5], expected[::5]):
    print(f'predicted: {p:.2f}, expected: {e:.2f}')
    
predict = (lambda x:linear_regression.coef_*x + linear_regression.intercept_)
predict(2019)
predict(1890)
import seaborn as sns
axes = sns.scatterplot(data=nyc, x='Date', y='Temperature', hue='Temperature', palette='Winter', legend=False)
axes = sns.scatterplot(data=nyc, x='Date', y='Temperature', hue='Temperature', palette='winter', legend=False)
axes.set_ylim(10, 70)
import numpy as np
x = np.array([min(nyc.Date.values), max(nyc.Date.values)])
y = predict(x)
import matplotlib.pyplot as plt
line = plt.plot(x, y)
